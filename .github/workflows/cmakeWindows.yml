name: CMake

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Host OS'
        required: false
        type: string
        default: '["ubuntu-22.04"]'
  pull_request:      # Triggers the workflow on pull request events

permissions: write-all

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
            os: [windows-latest]
    steps:
    - uses: actions/checkout@v4
      with:
       repository: 'FloatingArrayDesign/MoorDyn'

    - name: Set remote to fork
      run: |
        git remote set-url origin https://github.com/${{ github.repository }}.git

    - name: moordyn_version
      id: moordyn_version
      shell: bash
      run: |
        major=`cat CMakeLists.txt | grep MOORDYN_MAJOR_VERSION | head -1 | awk -F' ' '{print $2}' | awk -F')' '{print $1}'`
        minor=`cat CMakeLists.txt | grep MOORDYN_MINOR_VERSION | head -1 | awk -F' ' '{print $2}' | awk -F')' '{print $1}'`
        patch=`cat CMakeLists.txt | grep MOORDYN_PATCH_VERSION | head -1 | awk -F' ' '{print $2}' | awk -F')' '{print $1}'`
        echo "moordyn_version=$major.$minor.$patch" >> $GITHUB_OUTPUT

    - name: Configure CMake (Windows), build, and install
      run: |
        mkdir -p ${{ github.workspace }}/install
        cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/install -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DEXTERNAL_EIGEN:BOOL=OFF -DPYTHON_WRAPPER:BOOL=OFF -DFORTRAN_WRAPPER:BOOL=OFF -DRUST_WRAPPER:BOOL=OFF -DUSE_VTK=OFF -DMOORDYN_PACKAGE_IGNORE_VTK_DEPENDENCY=ON -DBUILD_TESTING=OFF
        cmake --build ${{ github.workspace }}/build --config ${{env.BUILD_TYPE}}
        cmake --install ${{ github.workspace }}/build --config ${{env.BUILD_TYPE}}      

    - name: Set $PATH (Windows)
      run: Add-Content $env:GITHUB_PATH "${{github.workspace}}\install\bin"
      if: runner.os == 'Windows'
    
    - name: Rename moordyn.dll to libmoordyn.dll
      run: |
        mkdir -p ${{ github.workspace }}/generated_files
        mv "${{ github.workspace }}/install/bin/moordyn.dll" "${{ github.workspace }}/generated_files/libmoordyn.dll"
      if: runner.os == 'Windows'

    - name: List generated files
      run: |
        echo "Contents of generated_files:"
        ls ${{ github.workspace }}/generated_files

    # Step 4: Upload the generated files
    - name: Upload generated files - Windows
      uses: actions/upload-artifact@v4
      with:
        name: generated-libraries
        path: |
          ${{ github.workspace }}/generated_files/libmoordyn.dll
      if: runner.os == 'Windows'

    - name: Upload generated files - MacOS
      uses: actions/upload-artifact@v4
      with:
        name: generated-libraries
        path: |
          ${{github.workspace}}/install-${{ matrix.os }}/lib/libmoordyn.dylib
          ${{github.workspace}}/install-${{ matrix.os }}/lib/libmoordyn.2.dylib
          ${{github.workspace}}/install-${{ matrix.os }}/lib/libmoordyn.2.3.dylib
      if: runner.os == 'MacOS'

      # Step 4: Add generated files to the repository
    - name: Commit generated files
      run: |
        git config --local user.name "GitHub Actions"
        git config --local user.email "actions@github.com"
        git add -f ${{ github.workspace }}/generated_files/libmoordyn.dll
        git commit -m "Add generated library files" || true
        git push -f origin HEAD:${{ github.ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}  # Use the GitHub token for authentication 
